# Diretório de trabalho
setwd("~/Dropbox/DSA/AnaliseEstatisticaI/Modulo06/Lista5")
getwd()
# Diretório de trabalho
setwd("~//git/curso_dsa/estatistica-i/Modulo07/2-lista5_sol.R")
getwd()
# Número de tentativas (quanto maior esse número, melhor nossas estimativas)
n <- 100000L
# Número de flips da moeda
nflips <- 100L
# Comparação
comparison <- 10L
# Acompanhar o resultado "sucesso"
num_succe <- 0L
# Executando o experimento
for (i in 1:n) {
num_succe <- num_succe +
(max(rle(rbinom(nflips, 1, 0.5))$lengths) >= comparison)
}
# Probabilidade estimada
num_succe / n
# Número de tentativas
n <- 5e5L
# Número de crianças
kids <- 1L:6L
# Acompanhar o resultado "sucesso"
num_succe <- 0L
# Executando o experimento
for (i in 1L:n) {
num_succe <- num_succe + identical(sample(kids, size = 6), 1L:6L)
}
# Probabilidade estimada
num_succe / n
# Solução alternativa
1 / factorial(6)
# Executando o experimento
for (i in 1L:n) {
num_succe <- num_succe + identical(sample(kids, size = 6), 1L:6L)
}
# Probabilidade estimada
num_succe / n
# Solução alternativa
1 / factorial(6)
# Número de tentativas
n <- 5e5L
# Número de crianças
kids <- 1L:6L
# Acompanhar o resultado "sucesso"
num_succe <- 0L
# Executando o experimento
for (i in 1L:n) {
num_succe <- num_succe + (sum(sample(kids, size = 3)) == 6L)
}
# Probabilidade estimada
num_succe / n
# Executando o experimento
for (i in 1L:n) {
num_succe <- num_succe + (sum(sample(kids, size = 3)) == 6L)
}
# Probabilidade estimada
num_succe / n
# Solução alternativa
factorial(3)^2 / factorial(6)
# Dias possíveis para nascer
days_pos <- 1L:365L
# Quantidade de pessoas nas festas
groups <- c(13, 23, 33, 53)
# Número de tentativas
n <- 1e5L
# Acompanha os "sucessos", ou seja, duas pessoas na festa compartilham um aniversário
num_succe <- vector(mode = "numeric", length = 4)
names(num_succe) <- paste0("party_size_", groups)
# Executa a simulação e adiciona a num_succe cada vez que houver uma duplicata em cada grupo
for (i in 1L:n) {
a <- lapply(groups, function(x) sample(days_pos, size = x, replace = TRUE))
num_succe <- num_succe + sapply(a, function(x) any(duplicated(x)))
}
# Probabilidade estimada
num_succe / n
# Executa a simulação e adiciona a num_succe cada vez que houver uma duplicata em cada grupo
for (i in 1L:n) {
a <- lapply(groups, function(x) sample(days_pos, size = x, replace = TRUE))
num_succe <- num_succe + sapply(a, function(x) any(duplicated(x)))
}
# Probabilidade estimada
num_succe / n
